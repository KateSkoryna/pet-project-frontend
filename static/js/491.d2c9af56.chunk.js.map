{"version":3,"file":"static/js/491.d2c9af56.chunk.js","mappings":"iWAkBMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,SAAUF,EAAAA,KAEPG,IAAI,GACJC,IAAI,IACJC,QACC,iBACA,2DAEDC,WACHC,gBAAiBP,EAAAA,KAEdQ,MAAM,CAACR,EAAAA,GAAQ,YAAa,MAAO,wBACnCG,IAAI,GACJC,IAAI,IACJE,aAmFL,EAhF0B,SAAHG,GAA+B,IAAzBC,EAAiBD,EAAjBC,kBACnBC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UACFG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjBC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAgDL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAxDE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAsB5C,OACEG,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CAAEC,MAAO,IACxBC,iBAAkBjC,EAClBkC,SAdkB,SAAHC,GAAsB,IAAhBhC,EAAQgC,EAARhC,SACvBY,GACEqB,EAAAA,EAAAA,IAAkB,CAChBC,KAAM,CAAElC,SAAUA,GAClBmC,WAAY3B,KAGhBM,EAAS,SACX,EAM4BsB,UAExBC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAF,SAAA,EACHC,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAACC,GAAI,CAAEC,SAAU,YAAaL,SAAA,EAChCV,EAAAA,EAAAA,KAACgB,EAAAA,GAAW,CACVC,KAAMvB,EAAe,OAAS,WAC9BwB,KAAK,WACLC,YAAY,WACZC,iBAAiB,UAEnBpB,EAAAA,EAAAA,KAACqB,EAAAA,GAAgB,CACf,aAAW,6BACXC,QApCsB,WAAH,OAAS3B,GAAgB,SAAA4B,GAAI,OAAKA,CAAI,GAAE,EAqC3DC,YApCsB,SAAAC,GAC9BA,EAAMC,gBACR,EAmCUC,KAAK,MAAKjB,SAEThB,GAAeM,EAAAA,EAAAA,KAAC4B,EAAAA,EAAa,KAAM5B,EAAAA,EAAAA,KAAC6B,EAAAA,EAAU,OAEjD7B,EAAAA,EAAAA,KAAC8B,EAAAA,GAAY,CAACC,UAAU,MAAMb,KAAK,WAAUR,SAC1C,SAAAsB,GAAG,OAAIrB,EAAAA,EAAAA,MAACsB,EAAAA,EAAS,CAAAvB,SAAA,CAAC,IAAEsB,IAAgB,QAGzCrB,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAACC,GAAI,CAAEC,SAAU,YAAaL,SAAA,EAChCV,EAAAA,EAAAA,KAACgB,EAAAA,GAAW,CACVC,KAAMnB,EAAmB,OAAS,WAClCoB,KAAK,kBACLC,YAAY,mBACZC,iBAAiB,UAEnBpB,EAAAA,EAAAA,KAACqB,EAAAA,GAAgB,CACf,aAAW,oCACXC,QAlD0B,WAAH,OAASvB,GAAoB,SAAAwB,GAAI,OAAKA,CAAI,GAAE,EAmDnEC,YAlD0B,SAAAC,GAClCA,EAAMC,gBACR,EAiDUC,KAAK,MAAKjB,SAETZ,GAAmBE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAa,KAAM5B,EAAAA,EAAAA,KAAC6B,EAAAA,EAAU,OAErD7B,EAAAA,EAAAA,KAAC8B,EAAAA,GAAY,CAACC,UAAU,MAAMb,KAAK,kBAAiBR,SACjD,SAAAsB,GAAG,OAAIrB,EAAAA,EAAAA,MAACsB,EAAAA,EAAS,CAAAvB,SAAA,CAAC,IAAEsB,IAAgB,QAGzChC,EAAAA,EAAAA,KAACkC,EAAAA,GAAU,CAACC,QAAQ,YAAYlB,KAAK,SAASH,GAAI,CAAEsB,GAAI,GAAI1B,SACxD3B,GAAsBiB,EAAAA,EAAAA,KAACqC,EAAAA,GAAW,IAAtB,cAKxB,ECzGe,SAASC,IACtB,IAAQxD,GAAsByD,EAAAA,EAAAA,MAAtBzD,kBAER,OACEkB,EAAAA,EAAAA,KAACwC,EAAAA,GAAa,CAAA9B,UACZC,EAAAA,EAAAA,MAAC8B,EAAAA,GAAc,CAAA/B,SAAA,EACbV,EAAAA,EAAAA,KAAC0C,EAAAA,EAAU,CAACP,QAAQ,KAAKrB,GAAI,CAAE6B,GAAI,GAAIjC,SAAC,6BAGxCV,EAAAA,EAAAA,KAAC4C,EAAiB,CAAC9D,kBAAmBA,QAI9C,C","sources":["components/ForgotPassword/ResetPasswordForm.js","pages/ResetPasswordPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { LoaderWhite } from 'components/Loader/Loader';\nimport { getAuth } from 'redux/auth/authSelectors';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport {\n  StyledInput,\n  ErrorText,\n  FormButton,\n  StyledIconButton,\n} from 'components/RegisterForm/Forms.styled';\nimport { Box } from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { resetUserPassword } from 'redux/auth/authOperations';\n\nconst schema = yup.object().shape({\n  password: yup\n    .string()\n    .min(7)\n    .max(32)\n    .matches(\n      /^[a-zA-Z0-9]*$/,\n      'Password must contain only latin letters and/or numbers'\n    )\n    .required(),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\n    .min(7)\n    .max(32)\n    .required(),\n});\n\nconst ResetPasswordForm = ({ confirmationToken }) => {\n  const { isLoading } = useSelector(getAuth);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfPassword, setShowConfPassword] = useState(false);\n\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const handleClickShowConfPassword = () => setShowConfPassword(show => !show);\n  const handleMouseDownConfPassword = event => {\n    event.preventDefault();\n  };\n\n  const onResendClick = ({ password }) => {\n    dispatch(\n      resetUserPassword({\n        body: { password: password },\n        resetToken: confirmationToken,\n      })\n    );\n    navigate('/login');\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '' }}\n      validationSchema={schema}\n      onSubmit={onResendClick}\n    >\n      <Form>\n        <Box sx={{ position: 'relative' }}>\n          <StyledInput\n            type={showPassword ? 'text' : 'password'}\n            name=\"password\"\n            placeholder=\"Password\"\n            disableunderline=\"true\"\n          />\n          <StyledIconButton\n            aria-label=\"toggle password visibility\"\n            onClick={handleClickShowPassword}\n            onMouseDown={handleMouseDownPassword}\n            edge=\"end\"\n          >\n            {showPassword ? <VisibilityOff /> : <Visibility />}\n          </StyledIconButton>\n          <ErrorMessage component=\"div\" name=\"password\">\n            {msg => <ErrorText>*{msg}</ErrorText>}\n          </ErrorMessage>\n        </Box>\n        <Box sx={{ position: 'relative' }}>\n          <StyledInput\n            type={showConfPassword ? 'text' : 'password'}\n            name=\"confirmPassword\"\n            placeholder=\"Confirm Password\"\n            disableunderline=\"true\"\n          />\n          <StyledIconButton\n            aria-label=\"toggle confirmPassword visibility\"\n            onClick={handleClickShowConfPassword}\n            onMouseDown={handleMouseDownConfPassword}\n            edge=\"end\"\n          >\n            {showConfPassword ? <VisibilityOff /> : <Visibility />}\n          </StyledIconButton>\n          <ErrorMessage component=\"div\" name=\"confirmPassword\">\n            {msg => <ErrorText>*{msg}</ErrorText>}\n          </ErrorMessage>\n        </Box>\n        <FormButton variant=\"contained\" type=\"submit\" sx={{ mt: 0 }}>\n          {!isLoading ? 'Reset' : <LoaderWhite />}\n        </FormButton>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ResetPasswordForm;\n","import { Typography } from '@mui/material';\nimport React from 'react';\nimport {\n  AuthContainer,\n  ContentWrapper,\n} from 'pages/LoginPage/LoginPage.styled';\nimport ResetPasswordForm from 'components/ForgotPassword/ResetPasswordForm';\nimport { useParams } from 'react-router-dom';\n\nexport default function ResetPasswordPage() {\n  const { confirmationToken } = useParams();\n\n  return (\n    <AuthContainer>\n      <ContentWrapper>\n        <Typography variant=\"h3\" sx={{ mb: 3 }}>\n          Enter your new password\n        </Typography>\n        <ResetPasswordForm confirmationToken={confirmationToken} />\n      </ContentWrapper>\n    </AuthContainer>\n  );\n}\n"],"names":["schema","yup","shape","password","min","max","matches","required","confirmPassword","oneOf","_ref","confirmationToken","isLoading","useSelector","getAuth","dispatch","useDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","showConfPassword","setShowConfPassword","_jsx","Formik","initialValues","email","validationSchema","onSubmit","_ref2","resetUserPassword","body","resetToken","children","_jsxs","Form","Box","sx","position","StyledInput","type","name","placeholder","disableunderline","StyledIconButton","onClick","show","onMouseDown","event","preventDefault","edge","VisibilityOff","Visibility","ErrorMessage","component","msg","ErrorText","FormButton","variant","mt","LoaderWhite","ResetPasswordPage","useParams","AuthContainer","ContentWrapper","Typography","mb","ResetPasswordForm"],"sourceRoot":""}